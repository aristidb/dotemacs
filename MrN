; -*- emacs-lisp -*-
;; My own options :-)

; Custom
(when (file-exists-p "~/.emacs.d/custom.el")
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file))

; Start the server for emacsclient
(server-start)

; Clipboard
(setq x-select-enable-clipboard t)

; Indentation
(setq-default indent-tabs-mode nil)
(setq-default tabs-width 2)

; Buffers menu
(setq-default buffers-menu-max-size 30)

; Font lock
(global-font-lock-mode 1)

; Line / Column numbers
(line-number-mode 1)
(column-number-mode 1)
; Size indication
(size-indication-mode 1)

; Add paths
(add-to-list 'load-path "/usr/local/share/emacs")
(add-to-list 'load-path "~/.emacs.d/site-lisp/")
(add-to-list 'load-path "~/local/share/emacs/site-lisp/")

; Modeline
(when (require 'modeline-posn nil 'noerror)
  (setq-default modelinepos-column-limit 80))

; ido
(require 'ido)
(ido-mode t)

; TRAMP (some of it from http://tsdh.wordpress.com/2008/08/20/re-open-read-only-files-as-root-automagically/)
(require 'tramp) ; total requirement :-)

(defun th-rename-tramp-buffer ()
  (when (file-remote-p (buffer-file-name))
    (rename-buffer
     (format "%s:%s"
             (file-remote-p (buffer-file-name) 'method)
             (buffer-name)))))

(add-hook 'find-file-hook
          'th-rename-tramp-buffer)

(defadvice find-file (around th-find-file activate)
  "Open FILENAME using tramp's sudo method if it's read-only."
  (if (and (not (file-writable-p (ad-get-arg 0)))
           (y-or-n-p (concat "File "
                             (ad-get-arg 0)
                             " is read-only.  Open it as root? ")))
      (th-find-file-sudo (ad-get-arg 0))
    ad-do-it))

(defun th-find-file-sudo (file)
  "Opens FILE with root privileges."
  (interactive "F")
  (set-buffer (find-file (concat "/sudo::" file))))

; C++ Mode
(defun aristid-c-mode-common ()
  (interactive)
  (font-lock-add-keywords nil 
                          '(("\\<\\(FIXME\\|TODO\\|XXX+\\|BUG\\):" 
                             1 font-lock-warning-face prepend)))  
  (c-set-style "user")
  (setq c-basic-offset 2)
  (c-set-offset 'arglist-intro '++)
  (c-set-offset 'arglist-close 0)
  (c-set-offset 'label 0))

(add-hook 'c-mode-common-hook 'aristid-c-mode-common)

; Org
(when (require 'org-install nil 'noerror)
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode)))

; ESS
(require 'ess-site "ess/ess-site" 'noerror)

; Maxima
(add-to-list 'load-path "/usr/share/emacs23/site-lisp/maxima")
(autoload 'maxima-mode "maxima/maxima" "Maxima mode" t)
(autoload 'imaxima "maxima/imaxima" "Frontend for maxima with Image support" t)
(autoload 'maxima "maxima/maxima" "Maxima interaction" t)
(autoload 'imath-mode "maxima/imath" "Imath mode for math formula input" t)
(setq imaxima-use-maxima-mode-flag t)

; Textile
(when (require 'textile-mode nil 'noerror)
  (add-to-list 'auto-mode-alist '("\\.textile\\'" . textile-mode)))

; Ledger
(when (require 'ledger nil 'noerror)
  (add-to-list 'auto-mode-alist '("\\.ledger\\'" . ledger-mode)))
